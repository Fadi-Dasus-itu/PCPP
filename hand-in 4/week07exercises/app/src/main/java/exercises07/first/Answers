7.1: all methods are implemented:
increment and getAndClear are thread safe since variable update happens through CAS non-blocking operation
 by verifying that we have an updated version of the variable before updating it.
getBins, getSpan: are thread safe since they are read only operation and the final key word as well as using the AtomicInteger guarantee visibility between threads.
 Thus, we are always reading an updated version of the array.

7.2 Output of performance Histogram evaluation for CAS and Locks from week6.

After Run both version of Histogram we observed a better performance for CAS implementation.
And the results are expeted because, in CAS when multiples threads attempt to execute a critical area one thread wins and 
the rest lose. However the losers are not punished by suspension(blocking) as in case of Locks, instead they can try to 
execute in the next rounds. This approach eliminates the shedulling problem in Locks which by resuming and suspending
a thread can create overhead impacting in the overall performance. 

#Output

#CAS implementation of Histogram

Count CAS histogram  1         27061326.5 ns  226169.71         16
Count CAS histogram  2         15194681.4 ns   92627.33         32
Count CAS histogram  3         11945897.6 ns  122563.43         32
Count CAS histogram  4         10842761.3 ns  581232.43         32
Count CAS histogram  5         12317296.0 ns  262370.90         32
Count CAS histogram  6         10931145.1 ns  191293.50         32
Count CAS histogram  7         10427102.5 ns   91056.78         32
Count CAS histogram  8         10239226.9 ns   82704.11         32
Count CAS histogram  9         12634568.5 ns   80764.27         32
Count CAS histogram 10         11708532.0 ns  193935.97         32
Count CAS histogram 11         11838003.8 ns  355578.48         32
Count CAS histogram 12         12243847.4 ns  156535.43         32
Count CAS histogram 13         12225919.5 ns   91099.51         32
Count CAS histogram 14         13814589.5 ns  746354.73         32
Count CAS histogram 15         13498005.6 ns  835982.33         32
Count CAS histogram 16         13016734.7 ns 1259111.69         32
Count CAS histogram 17         13502123.9 ns 1137053.09         32
Count CAS histogram 18         12228627.6 ns  117646.33         32
Count CAS histogram 19         12369290.1 ns  283292.11         32
Count CAS histogram 20         12876203.4 ns  423090.61         32
Count CAS histogram 21         14649591.5 ns  383570.62         32
Count CAS histogram 22         14341102.5 ns  185666.85         32
Count CAS histogram 23         11547223.4 ns  366141.57         32
Count CAS histogram 24         11329240.7 ns  205895.64         32
Count CAS histogram 25         12421835.0 ns  567662.70         32
Count CAS histogram 26         12220265.6 ns  896371.91         32
Count CAS histogram 27         12576802.6 ns  858435.35         32
Count CAS histogram 28         14946092.7 ns  650566.72         32
Count CAS histogram 29         11721733.5 ns  626285.81         32
Count CAS histogram 30         12122475.4 ns  433580.47         32
Count CAS histogram 31         12399922.2 ns  101484.71         32

#Locks implementation of Histogram

> Task :app:run
Count Lock histogram  1        23608192.6 ns  415169.51         16
Count Lock histogram  2        17434042.8 ns  628887.69         16
Count Lock histogram  3        17632147.3 ns  366567.78         16
Count Lock histogram  4        18437845.5 ns  319840.90         16
Count Lock histogram  5        21224905.7 ns  344812.57         16
Count Lock histogram  6        23164914.5 ns  525174.87         16
Count Lock histogram  7        24003644.7 ns  285994.54         16
Count Lock histogram  8        23382150.7 ns  300483.55         16
Count Lock histogram  9        20077571.6 ns  329724.10         16
Count Lock histogram 10        19827747.0 ns  606720.33         16
Count Lock histogram 11        19816970.7 ns  380469.47         16
Count Lock histogram 12        18997173.6 ns  169997.61         16
Count Lock histogram 13        18830676.4 ns  253964.09         16
Count Lock histogram 14        18771439.6 ns  167249.63         16
Count Lock histogram 15        19289705.1 ns  664735.51         16
Count Lock histogram 16        20423019.5 ns  360350.55         16
Count Lock histogram 17        20775265.4 ns  141906.59         16
Count Lock histogram 18        20792235.7 ns  129510.53         16
Count Lock histogram 19        19320375.8 ns 1184557.44         16
Count Lock histogram 20        19464969.7 ns  173696.83         16
Count Lock histogram 21        19483955.5 ns  136786.84         16
Count Lock histogram 22        19400204.4 ns   88042.48         16
Count Lock histogram 23        19515965.3 ns  103767.63         16
Count Lock histogram 24        18334036.2 ns  128763.76         16
Count Lock histogram 25        18294254.0 ns  131919.09         16
Count Lock histogram 26        18281808.5 ns   78253.11         16
Count Lock histogram 27        18878402.2 ns  112927.72         16
Count Lock histogram 28        18871135.8 ns  106082.61         16
Count Lock histogram 29        18892728.8 ns  119373.23         16
Count Lock histogram 30        20130331.4 ns  102780.57         16
Count Lock histogram 31        19747386.4 ns  345654.81         16







