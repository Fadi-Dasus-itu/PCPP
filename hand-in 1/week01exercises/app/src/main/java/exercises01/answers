
Exercise 1.1
/**
     * Q:	   	1. The main method creates a LongCounter object. Then it creates and starts two threads that run concurrently,
     *              and each increments the count field 10 million times by calling method increment.
     *              What output values do you get? Do you get the expected output, i.e., 20 million?
     * A:    	 1-The application outputs randoms numbers each time it is executed, and we didn't get the expected 20 million.
     *              Because two different threads has access the critical section at the same time without any synchronization mechanism
     *
     *
     * Q:		2. Reduce the counts value from 10 million to 100, recompile, and rerun the code. It is now likely that you
     *                  get the expected result (200) in every run.
     *                  Explain how this could be. Would you say that it is guaranteed that the output is always 200?
     *
     * A:		2- it is also possible in the first case to get 20000000 but it is unlikely, now in the second scenario the probability that
     *               the JVM schedule will change the execution between the two threads is small, simply because the processor is fast enough/ does not find the
     *                operation so costly and run each thread to completion.
     *                After change the count variable from 1million to 100, the program outputs the expected value of 200. However, whenever more than on thread access a shared variable at the same time without using any synchronization, that program will eventually brake. Sometimes the system may work just fine  for years, but it is
     *                still broken and may fail at any moment. Therefore, in this case we cant guarantee that the output will always be 200.
     *
     * Q:		3. The increment method in LongCounter uses the assignment  count = count + 1;
     *                  to add one to count. This could be expressed also as count += 1 or as count++.
     *                  Do you think it would make any difference to use one of these forms instead? Why? Change the code and
     *                   run it. Do you see any difference in the results for any of these alternatives?
     *
     * A:		3-1 No it will not make a difference
     *          3-2 because all three ways uses the same technique under the hood:
     *                  1- when the incrementer is like  count = count + 1;
     *                       ALOAD 0  // Push local variable 0 (this)
     *                       ALOAD 0  // Push local variable 0 (this)
     *                       GETFIELD exercises01/test.count : I
     *                       ICONST_1   // Push int constant 1
     *                       IADD       // add the integer 1
     *                       PUTFIELD exercises01/test.count : I
     *                   Hence, 1- the variable is read 2- increment by 1. 3- write it to memory again
     *                   2- when the incrementer is as count += 1 or as count++ :
     *                      ALOAD 0
     *                      DUP  // Make duplicate reference (this is the only difference, however the process did not change )(read, add one, write)
     *                      GETFIELD exercises01/test.count : I
     *                      ICONST_1
     *                      IADD
     *                      PUTFIELD exercises01/test.count : I
     *          3-3 No the result is the same
     *              In terms of having a thread safe application it won't make any difference in using one of the 3 operations( counter++, counter+ =1 and counter = counter + 1),
     *              because they are all non atomic operations meaning that the output will depend of the interleaving(Race condition)
     *
     *
     * Q 4. Set the value of counts back to 10 million. Use Java ReentrantLock to ensure that the output of the
     * program equals 20 million. Explain why your solution is correct, and why no other output is possible.
     * Note: In your explanation, please use the concepts and vocabulary introduced during the lecture, e.g., critical
     * sections, interleavings, race conditions, mutual exclusion, etc.
     * Note II: The notes above applies to all exercises asking you to explain the correctness of your solution.
     * Hint: When solving this exercise, try to avoid including code in critical sections if it is unnecessary. For
     *
     *
     *
     * instance, think whether the code in the method get() need to be part of a critical section.
     * A: the answer is in the code
     *The locks remove undesirable interleaving.Thus, guarantee the mutual exclusion property that says
     *“two or more threads can not execute their critical section at the same time”.
 */


Exercise 1.2

    2. Describe an interleaving where this happens
    the interleaving in which a flaw is printed to the console, is when the schedule puts the first thread to the suspended state and move
    to its ready state after printing the ("-) and before printing the ("|"). the second thread resumed and get running a complete round where it prints
     (-) and (|). Then the first thread resumes and run from where it lefts namely print (|)
     1. Thread 1 starts and prints “-“ and sleeps

     2. Thread 2 starts and prints “-“ and sleeps

     3. Thread 1 prints “|“ and finishes

     4. Thread 1 starts and prints “-“ and sleeps

     5. Thread 2 prints “|“ and finishes

     6. Thread 2 starts and prints “-“ and sleeps

     7. Thread 1 prints “|“ and finishes

     8. Thread 2 prints “|“ and finishes
     Output: - - | - | - | |

    3. Use Java ReentrantLock to ensure that the program outputs the expected sequence -|-|-|-|....
    Compile and run the improved program to see whether it works. Explain why your solution is correct, and
    why it is not possible for incorrect patterns, such as in the output above, to appear

   3A: by using the lock we are preventing the undesired interleaving, described above, by which the two bars | | or - - were printed after each other


Exercise 1.3
. Explain why your solution is correct, and why it always output 15000
    by using the lock we prevented an outdated read to the variable which means that there is no undesired interleaving in which the second thread
    will be able to read the count variable unless it is unlocked
    since the lock and increment happen before the unlock, the second thread read operation will always happen after the the write operation and unlock from the
    first one and visa versa


Exercise 1.4
         Resource utilization from Goetz book corresponds to Inherent from the Concurrency note.
         They both describe how programs should not block during input/output (reading/writing) operations.
         Similarly, Fairness from Goetz book and Exploitation from the Concurrency note state that a hardware (machine)
         should be able to serve more than one users / execute more than one program at the same time.
         Finally, there is a difference in the last motivation.
         Goetz talks about Convenience which means that it is more efficient to have smaller programs with a single task (responsibility)
         that coordinate and communicate between each other (which overlaps with Exploitation from Concurrency note) than to have one huge application
         that runs on a machine. On the other hand, in the Concurrency note, it is mentioned – Hidden, which expands on Goetz Fairness motivation by specifying
         that not only several programs should run on the same machine at the same time, but they should also be able to share resources – memory, data etc.


    1.4
    Inherent: ATM, WebShop, login.
    Exploitation: increment a variable, decrement a variable, the calculator.
    Hidden: Chat system, email system, any system that rely on the observer pattern.
